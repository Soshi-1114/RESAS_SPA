{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","selected","Array","fill","prefectures","series","_changeSelection","bind","fetch","headers","then","response","json","res","setState","result","index","selected_copy","this","slice","series_copy","i","length","name","prefName","splice","tmp","Object","keys","data","forEach","push","value","res_series","props","style","margin","display","type","checked","prefCode","onChange","obj","options","title","text","yAxis","xAxis","legend","layout","align","verticalAlign","plotOptions","label","connectorAllowed","pointInterval","pointStart","responsive","rules","condition","maxWidth","chartOptions","prefStyle","textAlign","horizontalLines","borderTop","query","color","padding","borderBottom","fontSize","map","renderItem","highcharts","Highcharts","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.734588fe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport MediaQuery from 'react-responsive';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selected: Array(47).fill(false),\n      prefectures: {},\n      series: []\n    };\n    this._changeSelection = this._changeSelection.bind(this);\n  }\n\n  componentDidMount() {\n    // 都道府県一覧API: https://opendata.resas-portal.go.jp/docs/api/v1/prefectures.html\n    fetch('https://opendata.resas-portal.go.jp/api/v1/prefectures', {\n      headers: { 'X-API-KEY': '6euBMEmjVCfP3tyHLESG1wVt2WugeW7Qac6VRCoD' }\n    })\n      .then(response => response.json())\n      .then(res => {\n        this.setState({ prefectures: res.result });\n      });\n  }\n\n  _changeSelection(index) {\n    const selected_copy = this.state.selected.slice();\n    // 真偽値を反転\n    selected_copy[index] = !selected_copy[index];\n\n    if (!this.state.selected[index]) {\n      // チェックされていなかった場合はデータを取得\n      // 人口構成API: https://opendata.resas-portal.go.jp/docs/api/v1/population/composition/perYear.html\n      fetch(\n        `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=${index +\n          1}`,\n        {\n          headers: { 'X-API-KEY': \"6euBMEmjVCfP3tyHLESG1wVt2WugeW7Qac6VRCoD\" }\n        }\n      )\n        .then(response => response.json())\n        .then(res => {\n          let tmp = [];\n          // lavel:総人口\n          Object.keys(res.result.data[0].data).forEach(i => {\n            tmp.push(res.result.data[0].data[i].value);\n          });\n          const res_series = {\n            name: this.state.prefectures[index].prefName,\n            data: tmp\n          };\n          this.setState({\n            selected: selected_copy,\n            series: [...this.state.series, res_series]\n          });\n        });\n    } else {\n      const series_copy = this.state.series.slice();\n      // チェック済みの場合はseriesから削除\n      for (let i = 0; i < series_copy.length; i++) {\n        if (series_copy[i].name === this.state.prefectures[index].prefName) {\n          series_copy.splice(i, 1);\n        }\n      }\n      this.setState({\n        selected: selected_copy,\n        series: series_copy\n      });\n    }\n  }\n\n  renderItem(props) {\n    return (\n      <div\n        key={props.prefCode}\n        style={{ margin: '5px', display: 'inline-block' }}\n      >\n        <input\n          type=\"checkbox\"\n          checked={this.state.selected[props.prefCode - 1]}\n          onChange={() => this._changeSelection(props.prefCode - 1)}\n        />\n        {props.prefName}\n      </div>\n    );\n  }\n\n  render() {\n    const obj = this.state.prefectures;\n    const options = {\n      title: {\n        text: '選択した都道府県の人口推移'\n      },\n      yAxis: {\n        title: {\n            text: '総人口（人）'\n        }\n      },\n      xAxis: {\n        title: {\n          text: '年度（年）'\n      }\n      },\n      legend: {\n        layout: 'vertical',\n        align: 'right',\n        verticalAlign: 'middle'\n    },\n      plotOptions: {\n        series: {\n          label: {\n            connectorAllowed: false\n          },\n          pointInterval: 5,\n          pointStart: 1965,\n        }\n      },\n      responsive: {\n        rules: [{\n            condition: {\n                maxWidth: 500\n            },\n            chartOptions: {\n                legend: {\n                    layout: 'horizontal',\n                    align: 'center',\n                    verticalAlign: 'bottom'\n                }\n            }\n        }]\n    },\n      series: this.state.series\n    };\n\n    const titleStyle1 = {\n      color: '#333333',\n      padding: '0.5em 0',\n      borderTop: 'solid 3px #DDDDDD',\n      borderBottom: 'solid 3px #DDDDDD',\n      textAlign: 'center',\n      fontSize: '40pt',\n    }\n\n    const titleStyle2 = {\n      color: '#333333',\n      padding: '0.5em 0',\n      borderTop: 'solid 3px #DDDDDD',\n      borderBottom: 'solid 3px #DDDDDD',\n      textAlign: 'center',\n      fontSize: '6pt',\n\n    }\n\n    const prefStyle = {\n      textAlign: 'center',\n    }\n\n    const horizontalLines = {\n      borderTop: '3px double #8c8b8b',\n    }\n\n    return (\n      <div>\n        <MediaQuery query=\"(max-width: 767px)\">\n          <div style={titleStyle2}>\n            <h1>都道府県別 総人口推移グラフ</h1>\n          </div>\n          <div style={prefStyle}>\n            {Object.keys(obj).map(i => this.renderItem(obj[i]))}\n          </div>\n          <hr style={horizontalLines}></hr>\n          <div>\n            <HighchartsReact highcharts={Highcharts} options={options} />\n          </div>\n        </MediaQuery>\n        <MediaQuery query=\"(min-width: 768px)\">\n          <div>\n            <h1 style={titleStyle1}>都道府県別　総人口推移グラフ</h1>\n          </div>\n          <div style={prefStyle}>\n            {Object.keys(obj).map(i => this.renderItem(obj[i]))}\n          </div>\n          <hr style={horizontalLines}></hr>\n          <div>\n            <HighchartsReact highcharts={Highcharts} options={options} />\n          </div>\n        </MediaQuery>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}